When would you want to create a remote repository rather than keeping all your work local?
You might do this when you want to collaborate with others, or make your work public.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
You may make changes remotely which you don't want to work on locally.
Also, if you have a public repository you may not want to automatically incorporate 3rd party changes locally.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Fork = New copy on Github of another repository on GitHub.
Clone = copy locally of a repository originating locally or on Github.
Branch = new path for commits on a single repository.
Use Fork to copy someone else's repository without changing the original.
Use Clone to create a new copy, e.g for a new project independent of the original.
Use Branch to create a new path, with intention of merging changes at some point in the future.

What is the benefit of having a copy of the last known state of the remote stored locally?
You can access it even when offline, e.g in an area of pure or non existent Internet coverage.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
You could use a manual system in which changes were checked via file compare and logged separately.
This could be error prone, especially if changes were documented manually.
Alternatively, you could focus all change through a change authority which only allowed one change at a time.
i.e if programmer A had checked out a version, no one else could update it until it had been returned.
This could be restrictive, but could make it easier to test collaborative change.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
There is no doubt that using a separate branch does introduce additional complexities.
Its main use in my opinion is likely to be for collaborative team working.
Perhaps making a major change to an existing application which needs to continue whilst the change takes place.
So the master branch could be used for bug fixes and minor changes, the extra branch for the project development.